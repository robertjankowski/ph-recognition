shiny::runApp()
runApp()
runApp()
?png
library(png)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(tools)
runApp()
runApp()
shiny::runApp()
?readPNG
??readPNG
library(jpeg)
install.packages("jpeg")
library(jpeg)
install.packages("png")
?png
jpeg()
jpeg("images/ph_scale1.jpg")
img <- readJPEG("images/ph_scale1.jpg")
img <- readJPEG("images/ph_scale1.jpg")
shiny::runApp()
runApp()
runApp()
library(jpg)
library(jpeg)
img <- readJPEG("images/ph_scale1.jpg")
img
img[[1]]
img[1, 1, ]
img[1, 20:30, ]
dim(img)
img[1:10, 20:30, ]
img[400:410, 200:30, ]
img[400:410, 200:210, ]
?readJPEG
library(png)
?readPNG
val <- rgb(img[,,1], img[,,2], img[,,3])
val
?clickOpts
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
source("http://bioconductor.org/biocLite.R")
library("EBImage")
install.packages("EBImage")
biocLite("EBImage")
library("EBImage")
files <- "images/ph_scale1.jpg"
file_type <- file_ext(files)
img <- ifelse(file_type == "jpg", readJPEG(files), readPNG(files))
img
img[[1]]
img[1,1,]
img[1,1,1]
img
img <- readJPEG(files)
file_type <- file_ext(files)
if (file_type == "jpg") {
img <- readJPEG(files)
} else if (file_type == "png") {
img <- readPNG(files)
}
val <- rgb(img[,,1], img[,,2], img[,,3])
val[11]
val[1,1]
typeof(val)
val
val <- matrix(img[,,1], img[,,2], img[,,3])
img[,,1]
img[10:22,10:12,1]
plot(img)
str(img)
dim(img)
typeof
typeof(img)
class(img)
value <- img[width, height,]
x <- 300
y <- 320
value <- img[x, y,]
value
value * 255
value <- img[x, y,]
value * 255.0
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(jpeg)
library("EBImage") # for resize function
# TODO
# write .py script to load model and make prediction based on mouse position
# return predictions and display on the screen
print(files)
files <- "images/ph_scale1.jpg"
file_type <- file_ext(files)
if (file_type == "jpg") {
img <- readJPEG(files)
} else if (file_type == "png") {
img <- readPNG(files)
} else {
img <- readJPEG("images/ph_scale1.jpg")
}
# resize
img <- resize(img, w = width, h = height)
width =1000
height = 300
# resize
img <- resize(img, w = width, h = height)
img
val <- matrix(img[,,1], img[,,2], img[,,3])
value <- val[x, y, ] * 255 # for RGB scale
x = 300
y = 320
val <- matrix(img[,,1], img[,,2], img[,,3])
value <- val[x, y, ] * 255 # for RGB scale
value
val
img <- readJPEG(files)
# resize
img <- resize(img, w = width, h = height)
val <- matrix(img[,,1], img[,,2], img[,,3])
value <- val[x, y, ] * 255 # for RGB scale
# resize
img <- resize(img, w = width, h = height)
val <- matrix(img[,,1], img[,,2], img[,,3])
val
img[,,1]
img <- readJPEG(files)
val <- matrix(img[,,1], img[,,2], img[,,3])
value <- val[x, y, ] * 255 # for RGB scale
# resize
img <- resize(img, w = width, h = height)
img <- readJPEG(files)
img[x, y, ]
value <- img[x, y,] * 255 # for RGB scale
cat("X        = ", x)
cat("\nY      = ", y)
cat("\nwidth  = ", width)
cat("\nheight = ", height)
cat("\nRED    = ", value[1])
cat("\nGREEN  = ", value[2])
cat("\nBLUE   = ", value[2], '\n')
cat(img[x,y,])
# resize
img <- resize(img, w = width, h = height)
value <- img[x, y,] * 255 # for RGB scale
value
img <- readJPEG(files)
# resize
img <- resize(img, w = width, h = height)
value <- img[x, y,] * 255 # for RGB scale
remove(value)
# resize
img <- resize(img, w = width, h = height)
value <- img[x, y,] * 255 # for RGB scale
img[x, y]
img
img[1]
img[2]
img[1][1]
img[1][3]
install.packages("OpenImageR")
library(OpenImageR)
img <- readJPEG(files)
# resize
img <- resizeImage(img, width, height)
value <- img[x, y,] * 255 # for RGB scale
y <- 100
value <- img[x, y,] * 255 # for RGB scale
value
runApp()
install.packages("magick")
library(magick)
img <- image_read(files)
img
# resize
img <- resizeImage(img, width, height)
scale_img <- paste(width, height, "x")
scale_img <- paste(width, height, sep = "x")
scaled_img <- image_scale(img, scaled_img)
scale_img <- paste(width, height, sep = "x")
scaled_img <- image_scale(img, scaled_img)
image_scale(img, scaled_img)
image_scale(img, scale_img)
img <- image_scale(img, scale_img)
img[1]
img[2]
img <- image_read(files)
scale_img <- paste(width, height, sep = "x")
img <- image_scale(img, scale_img)
img
img <- image_read(files)
img
install.packages("imager")
library(imager)
library(imager)
img <- load.image(files)
img
img[1]
img[,,1]
# resize
img <- resizeImage(img, width, height)
test <- as.data.frame.cimg
test <- as.data.frame.cimg()
?imager
help(imager)
df <- as.data.frame(img)
View(df)
df <- as.data.frame(img, wide='c')
df <- as.data.frame(img)
df <- as.data.frame(img)
library(tidyverse)
df <- df %>% select(-cc)
View(df)
df %>% as.matrix()
df %>% group_by(x,y) %>% as.matrix()
xtabs
?xtabs
xtabs(value~x+y, df)
mat <- xtabs(value~x+y, df)
View(mat)
nameVals <- sort(unique(unlist(df[1:2])))
myMat <- matrix(0, length(nameVals), length(nameVals), dimnames = list(nameVals, nameVals))
myMat[as.matrix(dat[c("var1", "var2")])] <- df[["value"]]
myMat[as.matrix(df$value)] <- df[["value"]]
library(reshape2)
acast(df, x~y, value.var="value")
img <- load.image(files)
df <- as.data.frame(img)
df <- df %>% select(-cc)
img <- acast(df, x~y, value.var="value")
remove(myMat, mat)
View(img)
View(df)
img[1]
img[1,1]
img[1,]
img[1,1,]
img[1,1]
img[x,y]
tmp <- data.frame(x=gl(2,3, labels=letters[24:25]),
y=gl(3,1,6, labels=letters[1:3]),
z=c(1,2,3,3,3,2))
acast(tmp, x~y, value.var="z")
tmp
View(df)
tmp <- df %>% spread(key=x, value=value)
img <- load.image(files)
# resize
img <- resizeImage(img, width, height)
# resize
img <- resize(img, width, height)
df <- as.data.frame(img)
df <- df %>% select(-cc)
View(df)
value <- df %>% filter(x == x && y == y)
value
value <- df %>% filter(x == mouse_x && y == mouse_y)
x
mouse_x <- x
mouse_y <- y
value <- df %>% filter(x == mouse_x && y == mouse_y)
value
value <- df %>% filter(x == mouse_x)
value
value <- df %>% filter(x == mouse_x) %>% filter(y == mouse_y)
value
value <- df %>% filter(x == mouse_x) %>% filter(y == mouse_y) %>% select(1)
value
value <- df %>% filter(x == mouse_x) %>% filter(y == mouse_y) %>% select(value)
value
mouse_x <- 100
value <- df %>% filter(x == mouse_x) %>% filter(y == mouse_y) %>% select(value)
mouse_x <- 100
value
df %>% filter(x==1)
img <- load.image(files)
df <- as.data.frame(img)
df <- df %>% select(-cc)
value <- df %>% filter(x == mouse_x)
value
value <- df %>% filter(x == mouse_x)
%>% filter(y == mouse_y) %>% select(value)
value <- df %>% filter(x == mouse_x) %>% filter(y == mouse_y) %>% select(value)
value
mouse_x <- x
value <- df %>% filter(x == mouse_x) %>% filter(y == mouse_y) %>% select(value)
value
x <- 1270
y <- 297
rgb_my <- c(83, 47, 199)
mouse_x <- x
mouse_y <- y
value <- df %>% filter(x == mouse_x) %>% filter(y == mouse_y) %>% select(value)
value
value * 255
# resize
img <- resize(img, width, height)
df <- as.data.frame(img)
df <- df %>% select(-cc)
value <- df %>% filter(x == mouse_x) %>% filter(y == mouse_y) %>% select(value)
value
runApp()
runApp()
runApp()
runApp()
runApp()
?int
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
files <- "images\ph_scale1.jpg"
files <- "images/ph_scale1.jpg"
library(jpeg)
library(OpenImageR)
library(imager)
library(tidyverse)
library(reshape2)
img <- load.image(files)
df <- as.data.frame(img)
View(df)
View(df)
df <- df %>% select(-cc)
View(df)
rgb_scale <- df %>% filter(x == floor(as.numeric(mouse_x))) %>%
filter(y == floor(as.numeric(mouse_y))) %>%
select(value) %>% mutate(value=value * 255.0)
mouse_x = 220
mouse_y = 286
rgb_scale <- df %>% filter(x == floor(as.numeric(mouse_x))) %>%
filter(y == floor(as.numeric(mouse_y))) %>%
select(value) %>% mutate(value=value * 255.0)
rgb_scale
str(rgb_scale)
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
files <- "images/ph_scale1.jpg"
runApp()
runApp()
model <- "bin_clf"
result <- system(paste("python load_model.py", model), intern = TRUE)
result <- system(paste("python load_model.py", model), intern = TRUE)
result <- system(paste("python load_model.py", model), intern = TRUE)
cat(result)
return (result)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(rsconnect)
rsconnect::setAccountInfo(name='robertjankowski',
token='8B1FCC83BA79DB4A5C2CE073C75FFBB7',
secret='gFUAgr7sQEgGegVZD+wdCHFjn7KFU05Oz3fT1zUn')
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
.libPaths()
